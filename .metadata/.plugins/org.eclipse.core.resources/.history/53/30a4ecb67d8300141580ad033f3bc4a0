import static java.nio.file.StandardOpenOption.CREATE_NEW;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.nio.file.Files;
import java.nio.file.Paths;

/**
 * Zadanie 7:
 * – czytanie i zapisywanie pliku binarnego przy u¿yciu kana³ów I/O –
 * ByteBuffer, SeekableByteChannel
 * informacje pomocnicze:
 * - import odpowiednich bibliotek
 * import java.nio.ByteBuffer;
 * import java.nio.channels.SeekableByteChannel;
 * - utworzenie kana³u wejœciowego
 * SeekableByteChannel sbc = Files.newByteChannel(in)
 * - utworzenie kana³u wyjœciowego
 * SeekableByteChannel sbc = Files.newByteChannel(out, CREATE, WRITE);
 * - inicjacja wielkoœci bufora
 * ByteBuffer buf = ByteBuffer.allocate(8192);
 * - ustawienie wskaŸnika w buforze na pocz¹tek oraz ustalenie iloœci
 * danych na aktualn¹ pozycjê wskaŸnika i pozwala czytaæ z bufora
 * buf.flip();
 * - przesuniêcie wskaŸnika w buforze na pocz¹tek
 * buf.rewind();
 * czynnoœci do wykonania:
 * 1) Proszê przepisaæ zadanie 5 z u¿yciem powy¿szych funkcji.
 * 2) Proszê przeanalizowaæ mo¿liwe opcje funkcji newByteChannel.
 * @author Micha³ Fraœ
 */
public class Main {

	public static void main(String[] args) {
		try(BufferedInputStream inStream =  new BufferedInputStream(Files.newInputStream(Paths.get(args[0])));
			BufferedOutputStream outStream = new BufferedOutputStream(Files.newOutputStream(Paths.get(args[1]), CREATE_NEW)))	{
			
			byte[] chunk = new byte[16384];
			int readen = 0;
			while((readen = inStream.read(chunk)) != -1){
				outStream.write(chunk, 0, readen);
			}
		} catch(ArrayIndexOutOfBoundsException e){
			System.out.println("Podaj 2 paramerty: plik_in plik_out");
		} catch(Exception e){
			e.printStackTrace();
		}
	}
	
}
